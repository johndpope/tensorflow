// This file is generated automatically, DO NOT EDIT
//  tensorflow/core/framework/op_def.proto
//  tensorflow/core/framework/op_def.pb.swift
//  https://github.com/tensorflow/tensorflow/blob/c9428db01eec1c457d9451ef1ca550b634bddf60/tensorflow/go/op/wrappers.go
// https://github.com/SwiftGen/templates/blob/master/templates/strings/flat-swift3.stencil

import Foundation
import Darwin.C.stddef
import Darwin.C.stdint
import CTensorFlow
import protoTensorFlow

/*
var _inputArg: [Tensorflow_OpDef.ArgDef] = []
var _outputArg: [Tensorflow_OpDef.ArgDef] = []
var _attr: [Tensorflow_OpDef.AttrDef] = []
var _deprecation: Tensorflow_OpDeprecation? = nil
var _summary: String = String()
var _description_p: String = String()
var _isCommutative: Bool = false
var _isAggregate: Bool = false
var _isStateful: Bool = false
var _allowsUninitializedInput: Bool = false
*/

{% for op in operations %}

/*
{{op._storage._summary}}

{{op._storage._description_p}}

*/

{% macro returnFunctionBlock types %}{% if op._storage._outputArg.count %}->({% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}: tf.Output{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endmacro %}
{% macro functionArgumentBlock types %}{% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}: tf.Output{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro functionAttributesBlock types %}{% for type in types %}{{type._storage._name}} :{{type._storage._type|snakeToCamelCase|lowerFirstWord}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}



{% macro returnBlock types %}{% for type in types %}op.Output({{forloop.counter}} -1){% if not forloop.last %},{% endif %}{% endfor %}{% endmacro %}
{% macro ifArgsCount %}{% if op._storage._inputArg.count %}scope:Scope,{% else %}scope:Scope{% endif %}{% endmacro %}
{% macro trimmedInputArgs types %}{% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}

func {{ op._storage._name|lowerFirstWord}}({% call ifArgsCount %}{% call functionArgumentBlock op._storage._inputArg %}{% call functionAttributesBlock op._storage._attr %})  {% call returnFunctionBlock op._storage._outputArg %}{
    if scope.error() != nil {
        return
    }
    let opspec = tf.OpSpec(
        Type: "{{ op._storage._name}}",
        Input: [ {% call trimmedInputArgs op._storage._inputArg %}]
        Attrs: attrs
    )
    {% if op._storage._outputArg.count %}
    let op = scope.AddOperation(opspec)
    return ({% call returnBlock op._storage._outputArg %}){% endif %}
}
{% endfor %}

