// This file is generated automatically, DO NOT EDIT
//  tensorflow/core/framework/op_def.proto
//  tensorflow/core/framework/op_def.pb.swift
//  https://github.com/tensorflow/tensorflow/blob/c9428db01eec1c457d9451ef1ca550b634bddf60/tensorflow/go/op/wrappers.go
// https://github.com/SwiftGen/templates/blob/master/templates/strings/flat-swift3.stencil

import Foundation
import Darwin.C.stddef
import Darwin.C.stdint
import CTensorFlow
import protoTensorFlow


{% for op in operations %}

/*
{{op.summary}}

{{op.description_p}}

*/
{% macro hasDefaultValue attribute %}{% if attribute.defaultValue %} = {{attribute.defaultValue}}{% endif %}{% endmacro %}

{% macro returnFunctionBlock types %}{% if op.hasNoOutputArg %}->(GoOperation?){% endif %}{% if op.hasOneOutputArg %}->(GoOperation?){% else %}{% if op.outputArg.count %}->({% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}: Output{% if not forloop.last %}, {% endif %}{% endfor %}){% endif%}{% endif %}{% endmacro %}
{% macro functionArgumentBlock types %}{% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}: Output{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro functionAttributesBlock types %}{% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}} :{{type.type|snakeToCamelCase}}  {% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro hasInputArgumentsAndAttribtues %}{% if op.inputArg.count %}{% if op.attr.count %},{% endif %}{% endif %} {%endmacro%}

{% macro returnBlock types %}{% for type in types %}op.Output({{forloop.counter}} - 1){% if not forloop.last %},{% endif %}{% endfor %}{% endmacro %}

{% macro trimmedInputArgs types %}{% for type in types %}{{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}

{% macro injectAttributes types %}{% for type in types %}attrs["{{type.name}}"] = {{type.name|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}
    {% endfor %}{% endmacro %}

func {{ op.name|lowerFirstWord}}({% if op.hasAttributeOrInputArgs %}scope:Scope,{% else %}scope:Scope{% endif %}{% call functionArgumentBlock op.inputArg %}{% call hasInputArgumentsAndAttribtues %}{% call functionAttributesBlock op.attr %})  {% call returnFunctionBlock op.outputArg %}{
    if scope.error.error != nil {
        return nil
    }

    var attrs:Dictionary<String,Any> = [:]
    {% call injectAttributes op.attr %}

    let opspec = OpSpec(
        OpType: "{{ op.name}}",
        Name: "Type",
        Input: [ {% call trimmedInputArgs op.inputArg %}],
        Attrs: attrs
    )
    {% if op.outputArg.count %}
    let op = scope.AddOperation(opspec)
    return ({% call returnBlock op.outputArg %})
    {%else%}
    return scope.AddOperation(opspec)
    {% endif %}
}
{% endfor %}

